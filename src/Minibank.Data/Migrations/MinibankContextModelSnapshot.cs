// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minibank.Data.DatabaseLayer.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Minibank.Data.Migrations
{
    [DbContext(typeof(MinibankContext))]
    partial class MinibankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Accounts.BankAccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateClose")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_close");

                    b.Property<DateTime>("DateOpen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_open");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bank_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bank_account_user_id");

                    b.ToTable("bank_account");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Transfers.MoneyTransferEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("FromBankAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_bank_account_id");

                    b.Property<string>("ToBankAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_bank_account_id");

                    b.HasKey("Id")
                        .HasName("pk_money_transfer");

                    b.HasIndex("FromBankAccountId")
                        .HasDatabaseName("ix_money_transfer_from_bank_account_id");

                    b.HasIndex("ToBankAccountId")
                        .HasDatabaseName("ix_money_transfer_to_bank_account_id");

                    b.ToTable("money_transfer");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Users.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Accounts.BankAccountEntity", b =>
                {
                    b.HasOne("Minibank.Data.DatabaseLayer.DbModels.Users.UserEntity", "OwnerUser")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_bank_account_user_owner_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Transfers.MoneyTransferEntity", b =>
                {
                    b.HasOne("Minibank.Data.DatabaseLayer.DbModels.Accounts.BankAccountEntity", "FromBankAccount")
                        .WithMany("MoneyTransfersFromAccount")
                        .HasForeignKey("FromBankAccountId")
                        .HasConstraintName("fk_money_transfer_bank_accounts_from_bank_account_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Minibank.Data.DatabaseLayer.DbModels.Accounts.BankAccountEntity", "ToBankAccount")
                        .WithMany("MoneyTransfersToAccount")
                        .HasForeignKey("ToBankAccountId")
                        .HasConstraintName("fk_money_transfer_bank_accounts_to_bank_account_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBankAccount");

                    b.Navigation("ToBankAccount");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Accounts.BankAccountEntity", b =>
                {
                    b.Navigation("MoneyTransfersFromAccount");

                    b.Navigation("MoneyTransfersToAccount");
                });

            modelBuilder.Entity("Minibank.Data.DatabaseLayer.DbModels.Users.UserEntity", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
